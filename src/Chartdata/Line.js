import React, { useEffect, useState } from "react";
import axios from "axios";
import { Line } from "react-chartjs-2";
import {
  Chart as chartjs,
  LineController,
  LineElement,
  LinearScale,
  Legend,
  CategoryScale,
  Tooltip,
  Title,
  PointElement,
} from "chart.js";

chartjs.register(
  LineController,
  LineElement,
  LinearScale,
  Legend,
  CategoryScale,
  Tooltip,
  Title,
  PointElement
);

const LineGraph = () => {
  const [chartData, setChartData] = useState({});

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get("http://localhost:8081/FetchProduct/Graph");
        const { AmountG } = response.data;

        if (!AmountG || AmountG.length === 0) {
          console.warn("No data found.");
          return;
        }
        // Safely map over AmountG only if it's defined and has items
        const labels = AmountG.map((product) => product.ProductName);
        const data = AmountG.map((product) => product.AmountGenerate);

        setChartData({
          labels,
          datasets: [
            {
              label: "Amount Generated by Product",
              data,
              backgroundColor: "rgba(86, 165, 164, 0.6)", 
              borderColor: "red",
              fill: false,
            },
          ],
        });
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchData();
  }, []);

  const options = {
    responsive: true,
    scales: {
      y: {
        beginAtZero: true,
        ticks: {
          color: "#000",
          font: { size: 14, weight: "bold" },
        },
      },
      x: {
        ticks: {
          color: "#000",
          font: { size: 14, weight: "bold" },
        },
      },
    },
    plugins: {
      legend: {
        labels: {
          color: "#000",
          font: { size: 14, weight: "bold" },
        },
      },
      title: {
        display: true,
        text: "Weekly Sales by Product",
        color: "#000",
        font: { size: 20, weight: "bold" },
      },
    },
    elements: {
      line: {
        borderColor: "#FF0000",
        borderWidth: 3,
      },
      point: {
        backgroundColor: "#FF0000",
        radius: 5,
      },
    },
  };

  return (
    <div
      style={{
        width: "600px",
        height: "400px",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
      }}
    >
      {chartData.labels ? (
        <Line options={options} data={chartData} />
      ) : (
        <p>No data available to display the chart.</p>
      )}
    </div>
  );
};

export default LineGraph;
